package net.kyrptonaught.ToolBox;

import com.google.gson.JsonObject;
import net.kyrptonaught.ToolBox.IO.ConfigLoader;
import net.kyrptonaught.ToolBox.IO.FileHelper;
import net.kyrptonaught.ToolBox.IO.GithubHelper;
import net.kyrptonaught.ToolBox.configs.BranchConfig;

import java.io.InputStream;
import java.nio.file.Path;

public class AutoHash {

    public static void autoHash() {
        String toolboxJson = FileHelper.readFile(Path.of("toolbox.json"));
        BranchConfig config = ConfigLoader.parseToolboxConfig(toolboxJson);

        for (BranchConfig.Dependency dependency : config.dependencies) {
            if (dependency.gitRepo) {
                String apiCall = GithubHelper.convertRepoToApiCall(dependency.url);
                JsonObject response = FileHelper.download(apiCall, JsonObject.class);
                String hash = response.getAsJsonObject("commit").getAsJsonPrimitive("sha").getAsString();
                dependency.autoGeneratedHash = hash;
                System.out.println("Generated Git Hash for " + dependency.displayName + ": " + hash);
            } else {
                try (InputStream in = FileHelper.openFileOrURL(dependency.url)) {
                    byte[] data = in.readAllBytes();
                    String hash = FileHelper.hashFile(data);
                    dependency.autoGeneratedHash = hash;
                    System.out.println("Generated Hash for " + dependency.displayName + ": " + hash);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        FileHelper.writeFile(Path.of("toolbox.json"), ConfigLoader.serializeToolboxInstall(config));
    }
}
